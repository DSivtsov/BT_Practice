using System;
using System.Collections.Generic;
using System.Linq;
using Lessons.AI.HierarchicalStateMachine;
using UnityEngine;
using Blackboard = Lessons.AI.HierarchicalStateMachine.Blackboard;
using Tree = Sample.Tree;

namespace Lessons.AI.LessonBehaviourTree
{
    public sealed class BT_SensorForest : MonoBehaviour
    {
        [Space, SerializeField] private Blackboard blackboard;
        [SerializeField] private Transform parentForest;

        private Dictionary<Tree, Vector3> forest;
        private static BT_SensorForest _instance;

        public static BT_SensorForest Instance => _instance;

        private void Awake()
        {
            if (_instance == null)
            {
                _instance = this;
            }
            else
                throw new NotImplementedException("[BT_SensorForest]: Singleton init error _instance != null");
            
            GetForest();
        }

        private void GetForest()
        {
            forest = parentForest
                .Cast<Transform>()
                .ToDictionary((tree) => tree.GetComponent<Tree>(),(tree) => tree.position);

            UpdateCountTrees();
        }

        private void UpdateCountTrees() => this.blackboard.SetVariable(BlackboardKeys.NUM_TREE, forest.Count);

        public bool SetNearestTree(Vector3 unitPosition, Blackboard unitBB)
        {
            float minDistance = float.MaxValue;
            Tree nearestTree = null;
            Vector3 treePosition = Vector3.zero;
            foreach (KeyValuePair<Tree, Vector3> tree in forest)
            {
                treePosition = tree.Value;
                Vector3 direction = treePosition - unitPosition;
                float distance = direction.sqrMagnitude;
                if (distance < minDistance)
                {
                    minDistance = distance;
                    nearestTree = tree.Key;
                }
            }

            if (nearestTree == null)  return false;
            
            unitBB.SetVariable(BlackboardKeys.MOVE_POSITION, treePosition);
            unitBB.SetVariable(BlackboardKeys.NEAREST_TREE, nearestTree);
            return true;
        }

        public void TreeDeactivated(Tree tree)
        {
            this.forest.Remove(tree);
            
            UpdateCountTrees();
        }
    }
}